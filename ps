#!/usr/bin/env python3
import mechanicalsoup
import os
import yaml
import stat
import sys

# Copied dependencies, TODO: cleanup needed
import requests, re,io,json
from lxml import html
import hmac, hashlib, base64
from bs4 import BeautifulSoup
import urllib.request
from tabulate import tabulate

CONFIG_PATH = os.path.expanduser('~') + '/.pow.yml'
config = {
    'username': '',
    'password': '',
}
if os.path.isfile(CONFIG_PATH) and os.path.getsize(CONFIG_PATH) is not 0:
    with open(CONFIG_PATH, 'r') as f:
        config = yaml.load(f)
else:
    config = {key: input(key + ': ') for key in config.keys()}
    with open(CONFIG_PATH, 'w') as f:
        yaml.dump(config, f)
    os.chmod(CONFIG_PATH, stat.S_IRUSR | stat.S_IRUSR)

# Check if group or public can read config and the private details therein.
# If so, warn user.
if os.stat(CONFIG_PATH).st_mode & (stat.S_IRGRP | stat.S_IROTH):
    print('Warning: config file may be accessible by other users.', file=sys.stderr)

s = requests.Session()
def hash(password, contextdata):
    return hmac.new(contextdata.encode('ascii'), base64.b64encode(hashlib.md5(password.encode('ascii')).digest()).replace(b'=', b''), hashlib.md5).hexdigest()

url = 'https://ps.fccps.org/guardian/home.html'
result = s.get(url)
tree = html.fromstring(result.text)
pstoken = list(set(tree.xpath('//*[@id=\'LoginForm\']/input[1]/@value')))[0]
contextdata = list(set(tree.xpath('//input[@id=\'contextData\']/@value')))[0]
new_pw = hash(config['password'], contextdata)

payload = {
    'pstoken': pstoken,
    'contextData': contextdata,
    'dbpw': new_pw,
    'ldappassword': config['password'],
    'account': config['username'],
    'pw': config['password']
}
p = s.post(url, data=payload)
content = p.content

bs = BeautifulSoup(content, 'lxml')
table = bs.find('table', class_='linkDescList grid')
rows = table.find_all('tr')

# Remove unnecessary "Attendance by Class" header
table_title = rows.pop(0).text

# While the table headers are intuitive when displayed in a browser, they're actually ordered strangely in the raw HTML.
# Thus, we need to take the day labels and move them into the line properly.
# TODO: Clarity
header = rows.pop(0)
titles = [cell.text for cell in header.find_all('th')]
print(titles)
# TODO: Clean up confusing naming
days = []
for day in rows.pop(0).find_all('th'):
    if day.text not in days:
        days.append(day.text)
print(days)

for row in rows:
    #print(row.prettify())
    for cell in row.find_all('td'):
        print(cell.text, end=' ')
    print()

"""
def createSmallClass(teacher, grade):
    data={}
    data['teacher']=teacher
    data['grade']=grade
    return data
def getRawClass(p):
    x={}
    data=BeautifulSoup(p.content, 'lxml')
    grades=data.findAll('a', { 'class' : 'bold' })
    tr=data.findAll('tr', {'id':re.compile('^ccid_\d+')})
    for i in range (0,6):
        td=tr[i].findAll('td')
        grade=td[len(td)-3]
        a=list(grade.find('a').getText())
        del a[0]
        a=''.join(a)
        teacher=tr[i].find('span',{ 'class' : 'screen_readers_only' }).parent['title'].strip('Details about ').replace(',','').split(' ')
        teacher.reverse()
        if(len(teacher)==3):
            del teacher[0]
        teacher= ' '.join(teacher)
        x['{}'.format(i+1)]=createSmallClass(teacher, a)
    return x
def createSmallAssignment(date, category, name, score, percent):
    data={}
    data['date']=date
    data['category']=category
    data['name']=name
    data['score']=score
    data['percent']=percent
    return data
def getRawAssignments(p,period):
    data=BeautifulSoup(p.content, 'lxml')
    grades=data.findAll('a', { 'class' : 'bold' })
    tr=data.findAll('tr', {'id':re.compile('^ccid_\d+')})
    td=tr[period-1].findAll('td')
    grade=td[len(td)-3]
    a=list(grade.find('a').getText())
    href='https://powerschool.sandi.net/guardian/'+grade.find('a')['href']

    p=s.get(href, headers = {'Accept-Encoding': 'identity'})
    data=BeautifulSoup(p.content, 'lxml')
    table=data.find('table', { 'align' : 'center' })
    tr=table.findAll('tr')
    assignments={}
    for i in range (1,len(tr)):
        td=tr[i].findAll('td')
        assignments['{}'.format(hex(i))]=createSmallAssignment(td[0].getText(),td[1].getText(),td[2].getText(),td[8].getText(),td[9].getText())
    return assignments
    return all
def getAllClass(p,period):
    data={}
    data['{}'.format(period)]=getRawAssignments(p,period)
    data['assignments']=data.pop('{}'.format(period))
    data['info']=getRawClass(p)['{}'.format(period)]
    return data
def getAllAssignments(p):
    data={}
    for i in range(1,7):
        data['{}'.format(i)]=getRawAssignments(p,i)
    return data
def getAllGrades(p):
    data={}
    for i in range(1,7):
        data['{}'.format(i)]=getAllClass(p,i)
    return data
def printJSON(data):
    print(json.dumps(data))
"""
